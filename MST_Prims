/// Finds a MST for the given graph \a g using Prim's algorithm.
template<typename Vertex, typename EdgeLbl>
std::set<typename EdgeLblUGraph<Vertex, EdgeLbl>::Edge>
    findMSTPrim(const EdgeLblUGraph<Vertex, EdgeLbl>& g)
{
    PriorityQ<Vertex, EdgeLbl> pQ;

    std::set<Vertex> visited;

    for(auto itV = g.getVertices().first; itV != g.getVertices().second; ++itV)
    {
        pQ.insert(*itV, INT_MAX);
    }

    auto edgeIter = g.getEdges().first;

    pQ.set(edgeIter->first, 0);

    std::map<Vertex,Vertex> MST;

    while(!pQ.isEmpty())
    {
        Vertex minVertex = pQ.getMin();
        visited.insert(minVertex);
        auto itAdjPairEdges = g.getAdjEdges(minVertex);

        pQ.remove(minVertex);

        for(auto mapOfEdgCIt = itAdjPairEdges.first; mapOfEdgCIt != itAdjPairEdges.second; ++mapOfEdgCIt)
        {
            Vertex adjVert = mapOfEdgCIt -> second;
            EdgeLbl lbl;
            g.getLabel(minVertex, adjVert, lbl);

            if(pQ.getCost(adjVert) > lbl && visited.find(adjVert) == visited.end())
            {
                pQ.set(adjVert, lbl);

                if(MST.find(adjVert) == MST.end())
                    MST.insert(std::make_pair(adjVert, minVertex));

                else
                    MST.find(adjVert) -> second = minVertex;
            }
        }

    }

    std::set<typename EdgeLblUGraph<Vertex, EdgeLbl>::Edge> res;

    for(auto mstIt = MST.begin(); mstIt != MST.end(); ++mstIt)
    {
        res.insert({mstIt->first, mstIt->second});
    }


    return res;
}
